name: 'Werft deployment cleanup'
description: 'Cleans up werft.run deployments when PRs are closed'
runs:
  using: 'composite'
  steps:
    - name: Extract deployment info
      id: extract
      uses: actions/github-script@v7
      with:
        script: |
          const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

          async function extractDeploymentInfo() {
            const prNumber = context.payload.pull_request.number;
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const prBody = pr.data.body || '';

            // Extract the deployment URL from the PR body
            const urlMatch = prBody.match(/https:\/\/[^\s]*\.app\.beforeprod\.com/);
            if (!urlMatch) {
              console.log('No deployment URL found in PR description, skipping cleanup');
              return null;
            }

            const url = urlMatch[0];
            const appAlias = url.match(/https:\/\/([^\.]+)\.app\.beforeprod\.com/)[1];
            console.log(`Found app alias: ${appAlias}`);

            return appAlias;
          }

          const maxRetries = 3;
          const retryDelay = 2000; // 2 seconds

          for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
              const appAlias = await extractDeploymentInfo();
              if (appAlias) {
                core.setOutput('app_alias', appAlias);
                console.log('Successfully extracted deployment info');
                break; // Success, exit the retry loop
              }
              return; // No URL found, exit early
            } catch (error) {
              console.error(`Attempt ${attempt}/${maxRetries} failed:`, error);

              if (attempt === maxRetries) {
                core.warning('Failed to extract deployment info after all retry attempts');
                break;
              }

              console.log(`Retrying in ${retryDelay/1000} seconds...`);
              await sleep(retryDelay);
            }
          }

    - name: Stop deployment
      if: steps.extract.outputs.app_alias
      shell: sh
      run: |
        echo "Running shpr app stop ${{ steps.extract.outputs.app_alias }}..."
        ${{ github.action_path }}/shpr app stop ${{ steps.extract.outputs.app_alias }}
